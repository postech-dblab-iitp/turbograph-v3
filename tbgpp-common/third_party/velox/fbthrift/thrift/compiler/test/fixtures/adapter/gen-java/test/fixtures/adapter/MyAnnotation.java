/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.adapter;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="MyAnnotation", builder=MyAnnotation.Builder.class)
public final class MyAnnotation implements com.facebook.thrift.payload.ThriftSerializable {

    @ThriftConstructor
    public MyAnnotation(
        @com.facebook.swift.codec.ThriftField(value=1, name="signature", requiredness=Requiredness.NONE) final String signature
    ) {
        this.signature = signature;
    }
    
    @ThriftConstructor
    protected MyAnnotation() {
      this.signature = null;
    }
    
    public static class Builder {
    
        private String signature = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="signature", requiredness=Requiredness.NONE)
        public Builder setSignature(String signature) {
            this.signature = signature;
            return this;
        }
    
        public String getSignature() { return signature; }
    
        public Builder() { }
        public Builder(MyAnnotation other) {
            this.signature = other.signature;
        }
    
        @ThriftConstructor
        public MyAnnotation build() {
            MyAnnotation result = new MyAnnotation (
                this.signature
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("MyAnnotation");
    private final String signature;
    public static final int _SIGNATURE = 1;
    private static final TField SIGNATURE_FIELD_DESC = new TField("signature", TType.STRING, (short)1);
    static {
      NAMES_TO_IDS.put("signature", 1);
      THRIFT_NAMES_TO_IDS.put("signature", 1);
      FIELD_METADATA.put(1, SIGNATURE_FIELD_DESC);
      com.facebook.thrift.type.TypeRegistry.add(new com.facebook.thrift.type.Type(
        new com.facebook.thrift.type.UniversalName("facebook.com/thrift/test/MyAnnotation"), 
        MyAnnotation.class, MyAnnotation::read0));
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="signature", requiredness=Requiredness.NONE)
    public String getSignature() { return signature; }
    
    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("signature", signature);
        return helper.toString();
    }
    
    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyAnnotation other = (MyAnnotation)o;
    
        return
            Objects.equals(signature, other.signature) &&
            true;
    }
    
    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            signature
        });
    }
    
    
    public static com.facebook.thrift.payload.Reader<MyAnnotation> asReader() {
      return MyAnnotation::read0;
    }
    
    public static MyAnnotation read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(MyAnnotation.NAMES_TO_IDS, MyAnnotation.THRIFT_NAMES_TO_IDS, MyAnnotation.FIELD_METADATA);
      MyAnnotation.Builder builder = new MyAnnotation.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _SIGNATURE:
          if (__field.type == TType.STRING) {
            String signature = oprot.readString();
            builder.setSignature(signature);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(this.signature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _MyAnnotationLazy {
        private static final MyAnnotation _DEFAULT = new MyAnnotation.Builder().build();
    }
    
    public static MyAnnotation defaultInstance() {
        return  _MyAnnotationLazy._DEFAULT;
    }
}
