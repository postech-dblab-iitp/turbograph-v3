/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.thrift.type;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

/**
 * A integer fraction of the form {numerator} / {denominator}
 * 
 * Useful for representing ratios, rates, and metric accumulators.
 * 
 * Considered 'normal' when the denominator is positive.
 * Considered 'simple' when `normal` and the greatest common divisor of the
 * and `numerator` and `denominator`, is 1.
 */
@SuppressWarnings({ "unused", "serial" })
public class FractionStruct implements TBase, java.io.Serializable, Cloneable, Comparable<FractionStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("FractionStruct");
  private static final TField NUMERATOR_FIELD_DESC = new TField("numerator", TType.I64, (short)1);
  private static final TField DENOMINATOR_FIELD_DESC = new TField("denominator", TType.I64, (short)2);

  /**
   * The numerator/dividend/antecedent/upper integer.
   */
  public long numerator;
  /**
   * The denominator/divisor/consequent/lower integer.
   */
  public long denominator;
  public static final int NUMERATOR = 1;
  public static final int DENOMINATOR = 2;

  // isset id assignments
  private static final int __NUMERATOR_ISSET_ID = 0;
  private static final int __DENOMINATOR_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(NUMERATOR, new FieldMetaData("numerator", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(DENOMINATOR, new FieldMetaData("denominator", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(FractionStruct.class, metaDataMap);
  }

  public FractionStruct() {
  }

  public FractionStruct(
      long numerator,
      long denominator) {
    this();
    this.numerator = numerator;
    setNumeratorIsSet(true);
    this.denominator = denominator;
    setDenominatorIsSet(true);
  }

  public static class Builder {
    private long numerator;
    private long denominator;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setNumerator(final long numerator) {
      this.numerator = numerator;
      __optional_isset.set(__NUMERATOR_ISSET_ID, true);
      return this;
    }

    public Builder setDenominator(final long denominator) {
      this.denominator = denominator;
      __optional_isset.set(__DENOMINATOR_ISSET_ID, true);
      return this;
    }

    public FractionStruct build() {
      FractionStruct result = new FractionStruct();
      if (__optional_isset.get(__NUMERATOR_ISSET_ID)) {
        result.setNumerator(this.numerator);
      }
      if (__optional_isset.get(__DENOMINATOR_ISSET_ID)) {
        result.setDenominator(this.denominator);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FractionStruct(FractionStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.numerator = TBaseHelper.deepCopy(other.numerator);
    this.denominator = TBaseHelper.deepCopy(other.denominator);
  }

  public FractionStruct deepCopy() {
    return new FractionStruct(this);
  }

  /**
   * The numerator/dividend/antecedent/upper integer.
   */
  public long getNumerator() {
    return this.numerator;
  }

  /**
   * The numerator/dividend/antecedent/upper integer.
   */
  public FractionStruct setNumerator(long numerator) {
    this.numerator = numerator;
    setNumeratorIsSet(true);
    return this;
  }

  public void unsetNumerator() {
    __isset_bit_vector.clear(__NUMERATOR_ISSET_ID);
  }

  // Returns true if field numerator is set (has been assigned a value) and false otherwise
  public boolean isSetNumerator() {
    return __isset_bit_vector.get(__NUMERATOR_ISSET_ID);
  }

  public void setNumeratorIsSet(boolean __value) {
    __isset_bit_vector.set(__NUMERATOR_ISSET_ID, __value);
  }

  /**
   * The denominator/divisor/consequent/lower integer.
   */
  public long getDenominator() {
    return this.denominator;
  }

  /**
   * The denominator/divisor/consequent/lower integer.
   */
  public FractionStruct setDenominator(long denominator) {
    this.denominator = denominator;
    setDenominatorIsSet(true);
    return this;
  }

  public void unsetDenominator() {
    __isset_bit_vector.clear(__DENOMINATOR_ISSET_ID);
  }

  // Returns true if field denominator is set (has been assigned a value) and false otherwise
  public boolean isSetDenominator() {
    return __isset_bit_vector.get(__DENOMINATOR_ISSET_ID);
  }

  public void setDenominatorIsSet(boolean __value) {
    __isset_bit_vector.set(__DENOMINATOR_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case NUMERATOR:
      if (__value == null) {
        unsetNumerator();
      } else {
        setNumerator((Long)__value);
      }
      break;

    case DENOMINATOR:
      if (__value == null) {
        unsetDenominator();
      } else {
        setDenominator((Long)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case NUMERATOR:
      return new Long(getNumerator());

    case DENOMINATOR:
      return new Long(getDenominator());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof FractionStruct))
      return false;
    FractionStruct that = (FractionStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.numerator, that.numerator)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.denominator, that.denominator)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {numerator, denominator});
  }

  @Override
  public int compareTo(FractionStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumerator()).compareTo(other.isSetNumerator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(numerator, other.numerator);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDenominator()).compareTo(other.isSetDenominator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(denominator, other.denominator);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case NUMERATOR:
          if (__field.type == TType.I64) {
            this.numerator = iprot.readI64();
            setNumeratorIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DENOMINATOR:
          if (__field.type == TType.I64) {
            this.denominator = iprot.readI64();
            setDenominatorIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NUMERATOR_FIELD_DESC);
    oprot.writeI64(this.numerator);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DENOMINATOR_FIELD_DESC);
    oprot.writeI64(this.denominator);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("FractionStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("numerator");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getNumerator(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("denominator");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getDenominator(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

